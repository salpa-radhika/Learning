read me terraform

Why terraform?
Manage any infrastructure
Track your infrastructure
Automate changes	
Standardize configuration
Collaborate

Install terraform
brew install terraform
brew upgrade terraform


Main commands:
  init          Prepare your working directory for other commands
  validate      Check whether the configuration is valid
  plan          Show changes required by the current configuration
  apply         Create or update infrastructure
  destroy       Destroy previously-created infrastructure


Ami-id's
ap-northeast-1 ami-50eaed51
ap-southeast-1 ami-f95875ab
eu-central-1 ami-ac1524b1
eu-west-1 ami-823686f5
sa-east-1 ami-c770c1da
us-east-1 ami-4ae27e22
us-west-1 ami-d1180894
cn-north-1 ami-fe7ae8c7
us-gov-west-1 ami-cf5630ec
ap-southeast-2 ami-890b62b3
us-west-2 ami-898dd9b9


set keys as environment variables
export AWS_ACCESS_KEY_ID= access_key      
export AWS_SECRET_ACCESS_KEY=secret_key

terraform console
this console helps get info of resources created and data available in state file
ex: aws_s3_bucket.terraform_bucket.server_side_encryption_configuration[0].rule[0].apply_server_side_encryption_by_default[0].sse_algorithm


Store plan command output into file

terraform plan -out plan_output.tfplan




If you wanted to execute only one resource out of multiple resources

terraform apply -target=aws_iam_user.terraform_user
above commands also executes dependency resources.



Some of the Terraform blocks (elements) and their purpose is given below

providers - the provider name aws, google, azure etc
resources - a specific resource with in the provide such as aws_instance for aws
variable - to declare input variables
output - to declare output variables which would be retained the Terraform state file
local - to assign value to an expression, these are local temporary variables work with in a module
module - A module is a container for multiple resources that are used together.
data - To Collect data from the remote provider and save it as a data source



Meta arguments
Meta-arguments are special arguments in Terraform that are used to control how resources are created, updated, or destroyed.

Count
Count is an argument that takes a integer value that tells how many copies of a resource to make. When you use count, each instance gets a number (starting with 0), which you can use to get to that instance.

for_each:
This option can be either a map or a set of strings. For each item in the map or set of strings, a new instance is made. The map or set gives each instance a key that can be used to get to that instance.


doc for terraform
https://jhooq.com/terraform-import-resource/
